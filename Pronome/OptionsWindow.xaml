<Window x:Class="Pronome.OptionsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Pronome"
        mc:Ignorable="d"
        Title="ProNome Options" Height="600" Width="530"
        Name="optionsWindow">
    <Window.Resources>
        <!--Define the data source for the user source library-->
        <local:UserSourceLibrary x:Key="userSourceLibrary"/>
        <!--<CollectionViewSource x:Key="userSourceLibrarySorted" 
                              Source="{Binding Source={StaticResource userSourceLibrary}}"
                              xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Index"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>-->

        <local:HiHatStatusConverter x:Key="hihatStatusConverter"/>
        <local:NullToBooleanConverter x:Key="nullToBoolConverter"/>

        <RoutedCommand x:Key="userSourceRemoveCommand"/>
    </Window.Resources>
    
    <Window.CommandBindings>
        <CommandBinding Command="{StaticResource userSourceRemoveCommand}" 
                        Executed="CommandBinding_Executed" 
                        CanExecute="CommandBinding_CanExecute"/>
    </Window.CommandBindings>
    
    <ScrollViewer VerticalScrollBarVisibility="Auto">
        
        <DockPanel Name="dock" HorizontalAlignment="Stretch" 
                       DataContext="{DynamicResource disableDuringPlay}" >
            <DockPanel.Resources>
                <Style TargetType="StackPanel">
                    <Setter Property="Margin" Value="10, 0"/>
                </Style>
                <Style TargetType="TextBox">
                    <Setter Property="Width" Value="50"/>
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                </Style>
                <Style TargetType="Button">
                    <Setter Property="Margin" Value="10, 0"/>
                </Style>
                <Style TargetType="Expander">
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="VerticalAlignment" Value="Top"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="DockPanel.Dock" Value="Top"/>
                    <Setter Property="Padding" Value="10"/>
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBlock Text="{Binding}" FontSize="15" FontWeight="Bold" Padding="7,0,0,0"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Padding" Value="10,10,10,20"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="TextBlock">
                    <Setter Property="Margin" Value="5,-7,5,10"/>
                    <Setter Property="TextWrapping" Value="Wrap"/>
                </Style>
                <Style TargetType="Separator">
                    <Setter Property="Margin" Value="0,20,0,20"/>
                </Style>
                <Style TargetType="GroupBox">
                    <Setter Property="Padding" Value="10"/>
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBlock Text="{Binding}" FontSize="10"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DockPanel.Resources>

        <!--Random Muting-->
            <Expander Header="Random Muting">
                <StackPanel>
                    <TextBlock>When Random Muting is enabled, there is a percent chance that a beat cell will not be played. Enter a Ramp Duration to have the chance start at 0% and reach the full value in the given number of seconds.</TextBlock>
                    <WrapPanel>
                        <StackPanel>
                            <Label Target="{Binding ElementName=randomMuteToggle}">Enable</Label>
                            <CheckBox x:Name="randomMuteToggle" Checked="applyMuting" Unchecked="applyMuting" HorizontalAlignment="Center"/>
                        </StackPanel>
                        <StackPanel>
                            <Label Target="{Binding ElementName=randomMuteInput}">Percentage</Label>
                            <TextBox x:Name="randomMuteInput" LostFocus="applyMuting"  Text="0" HorizontalAlignment="Center"/>
                        </StackPanel>
                        <StackPanel>
                            <Label Target="{Binding ElementName=randomMuteTimerInput}">Ramp Duration (seconds)</Label>
                            <TextBox x:Name="randomMuteTimerInput" LostFocus="applyMuting" Text="0" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </WrapPanel>
                </StackPanel>
            </Expander>
            <!--Interval muting-->
            <Expander Header="Intervallic Muting">
                <StackPanel>
                    <TextBlock>
                        With intervallic muting enabled, the beat will play for a set duration and then be silent for a set duration. The interval durations are represented as a number of Quarter-Notes.
                    </TextBlock>
                    <WrapPanel IsEnabled="{Binding Path=IsEnabled}">
                        <StackPanel>
                            <Label Target="{Binding ElementName=intervalMuteToggle}">Enable</Label>
                            <CheckBox x:Name="intervalMuteToggle" Checked="applyIntervalMuting" Unchecked="applyIntervalMuting" HorizontalAlignment="Center"/>
                        </StackPanel>
                        <StackPanel>
                            <Label Target="{Binding ElementName=intervalAudibleInput}">Audible Interval</Label>
                            <TextBox x:Name="intervalAudibleInput" 
                                        Text="0" 
                                        ToolTip="A value representing the number of audible quarter notes."
                                        LostFocus="applyIntervalMuting"
                                     HorizontalAlignment="Center"/>
                        </StackPanel>
                        <StackPanel>
                            <Label Target="{Binding ElementName=intervalSilentInput}">Silent Interval</Label>
                            <TextBox x:Name="intervalSilentInput"
                                        Text="0"
                                        ToolTip="A value representing the number of silent quarter notes."
                                        LostFocus="applyIntervalMuting"
                                     HorizontalAlignment="Center"/>
                        </StackPanel>
                    </WrapPanel>
                </StackPanel>
            </Expander>
            <!--Save and Load-->
            <Expander Header="Save and Load">
                <StackPanel>
                    <TextBlock>
                        You can save your work to a file or open a previously saved beat.
                    </TextBlock>
                    <WrapPanel>
                        <Button Name="saveButton" Click="saveButton_Click">Save Beat As...</Button>
                        <Button Name="loadButton" Click="loadButton_Click" IsEnabled="{Binding Path=IsEnabled}">Load Beat</Button>
                    </WrapPanel>
                </StackPanel>
            </Expander>
            <!--Custom Sound Library-->
            <Expander Header="Custom Sound Library">
                <StackPanel>
                    <TextBlock>
                        Manage your custom sound sample library.
                    </TextBlock>
                    <DockPanel>
                        <StackPanel DockPanel.Dock="Bottom">
                            <WrapPanel Orientation="Vertical">
                                <Label Target="{Binding ElementName=customSourceLabel}">Label</Label>
                                <TextBox Name="customSourceLabel" 
                                         Width="130" 
                                         IsEnabled="{Binding ElementName=customSoundListBox, Path=SelectedItem, Converter={StaticResource nullToBoolConverter}}">
                                    <TextBox.Text>
                                        <Binding ElementName="customSoundListBox" Path="SelectedItem.Label">
                                            <Binding.ValidationRules>
                                                <local:UserSouceLabelRule/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </WrapPanel>
                            <WrapPanel Orientation="Vertical">
                                <Label Target="{Binding ElementName=customSoundHiHatStatus}">HiHat Status</Label>
                                <ComboBox Name="customSoundHiHatStatus" 
                                          IsEnabled="{Binding ElementName=customSoundListBox, Path=SelectedItem, Converter={StaticResource nullToBoolConverter}}"
                                          SelectedIndex="{Binding ElementName=customSoundListBox, Path=SelectedItem.HiHatStatus, Converter={StaticResource hihatStatusConverter}}">
                                    <ComboBoxItem>None</ComboBoxItem>
                                    <ComboBoxItem>Open</ComboBoxItem>
                                    <ComboBoxItem>Down</ComboBoxItem>
                                </ComboBox>
                            </WrapPanel>
                            <WrapPanel Orientation="Vertical">
                                <Label Target="{Binding ElementName=customSoundFilePath}">File Path</Label>
                                <TextBlock Name="customSoundFilePath" Text="{Binding ElementName=customSoundListBox, Path=SelectedItem.Uri}"/>
                            </WrapPanel>

                        </StackPanel>
                        <StackPanel Orientation="Vertical" DockPanel.Dock="Left">
                            <Button Name="customSoundNewButton" Click="customSoundNewButton_Click" Margin="0,0,0,5">New</Button>
                            <Button Name="customSoundRemoveButton" Command="{StaticResource userSourceRemoveCommand}" Margin="0,0,0,0">Remove</Button>
                        </StackPanel>

                        <ListBox Name="customSoundListBox" 
                                 ItemsSource="{Binding Source={StaticResource userSourceLibrary}}" 
                                 HorizontalAlignment="Stretch"
                                 Height="110"
                                 SelectionMode="Single">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}"/>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </DockPanel>
                </StackPanel>
            </Expander>
            <Expander Header="Wav File Creation">
                <StackPanel>
                    <TextBlock>
                        There's two ways to export your beat to a Wav audio file:<LineBreak/>
                        - Based on a specified length of time.<LineBreak/>
                        - Record to the Wav file as the beat is playing until you press stop.
                    </TextBlock>
                    <WrapPanel IsEnabled="{Binding Path=IsEnabled}">
                        <Button Name="exportWavButton" Click="exportWavButton_Click">Export Wav File</Button>
                        <Button Name="recordWavButton" Click="recordWavButton_Click">Record to Wav File</Button>
                    </WrapPanel>
                </StackPanel>
            </Expander>
            <Expander Header="Visuals">
                <StackPanel>
                    <GroupBox Header="Graph">
                        <StackPanel>
                            <TextBlock>
                                Turn the beat graph's blinking visual effect on or off.
                            </TextBlock>
                            <WrapPanel Orientation="Vertical">
                                <Label Target="{Binding ElementName=blinkToggle}">Enable Blinking</Label>
                                <CheckBox Name="blinkToggle" 
                                          Checked="blinkToggle_Checked" 
                                          Unchecked="blinkToggle_Unchecked"  
                                          Loaded="blinkToggle_Loaded"
                                          HorizontalAlignment="Center"/>
                            </WrapPanel>
                        </StackPanel>
                    </GroupBox>

                    <GroupBox Header="Bounce">
                        <StackPanel>
                            <TextBlock>
                                The number of quarter-notes to show in the queue.
                            </TextBlock>
                            <WrapPanel Orientation="Vertical">
                                <Label Target="{Binding ElementName=queueSize}">Queue Size</Label>
                                <TextBox Name="queueSizeInput" 
                                         LostFocus="queueSizeInput_LostFocus" 
                                         Loaded="queueSizeInput_Loaded"
                                         HorizontalAlignment="Center"/>
                            </WrapPanel>
                            <Separator/>
                            
                            <TextBlock>
                                Set where to divide the screen.
                            </TextBlock>
                            <Slider Name="bounceDivideSlider" 
                                    ValueChanged="bounceDivideSlider_ValueChanged" 
                                    Loaded="bounceDivideSlider_Loaded"
                                    Minimum="0" Maximum=".80"/>
                            <Separator/>

                            <TextBlock>
                                Set the amount of taper in the queue lanes.
                            </TextBlock>
                            <Slider Name="bounceLaneTaperSlider" 
                                    ValueChanged="bounceLaneTaperSlider_ValueChanged" 
                                    Loaded="bounceLaneTaperSlider_Loaded"
                                    Minimum="0" Maximum="600"/>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>
            </Expander>
            <Expander Header="Additional Settings">
                <StackPanel>
                    <WrapPanel Orientation="Horizontal">
                        <CheckBox Name="persistSessionCheckBox" 
                                  Checked="persistSessionCheckBox_Checked" 
                                  Unchecked="persistSessionCheckBox_Unchecked"
                                  Loaded="persistSessionCheckBox_Loaded"
                                  VerticalAlignment="Center"/>
                        <Label Target="{Binding ElementName=persistSessionCheckBox}">Load the beat from previous session on start up.</Label>
                    </WrapPanel>
                    <Separator/>
                    <TextBlock>
                        Sets the duration of pitch tones in seconds.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal">
                        <Label Target="{Binding ElementName=pitchDecayLength}">Pitch Decay</Label>
                        <TextBox Name="pitchDecayLength"
                                   LostFocus="pitchDecayLength_LostFocus"
                                   Loaded="pitchDecayLength_Loaded"
                                   Width="50"
                                   HorizontalAlignment="Center"/>
                    </StackPanel>
                    <Separator/>
                    <TextBlock>
                        Sets the font size for beat code inputs.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal">
                        <Label Target="{Binding ElementName=beatFontSizeTextBox}"></Label>
                        <TextBox Name="beatFontSizeTextBox"
                                 LostFocus="beatFontSizeTextBox_LostFocus" 
                                 Loaded="beatFontSizeTextBox_Loaded" 
                                 Width="50"
                                 HorizontalAlignment="Center"/>
                    </StackPanel>
                </StackPanel>
            </Expander>
        </DockPanel>
    </ScrollViewer>
        <!--</ScrollViewer>-->
</Window>
